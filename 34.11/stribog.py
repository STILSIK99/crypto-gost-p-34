import os

kPi = [
        'fc', 'ee', 'dd', '11', 'cf', '6e', '31', '16', 'fb', 'c4', 'fa', 'da', '23', 'c5', '04', '4d', 
        'e9', '77', 'f0', 'db', '93', '2e', '99', 'ba', '17', '36', 'f1', 'bb', '14', 'cd', '5f', 'c1', 
        'f9', '18', '65', '5a', 'e2', '5c', 'ef', '21', '81', '1c', '3c', '42', '8b', '01', '8e', '4f', 
        '05', '84', '02', 'ae', 'e3', '6a', '8f', 'a0', '06', '0b', 'ed', '98', '7f', 'd4', 'd3', '1f', 
        'eb', '34', '2c', '51', 'ea', 'c8', '48', 'ab', 'f2', '2a', '68', 'a2', 'fd', '3a', 'ce', 'cc', 
        'b5', '70', '0e', '56', '08', '0c', '76', '12', 'bf', '72', '13', '47', '9c', 'b7', '5d', '87', 
        '15', 'a1', '96', '29', '10', '7b', '9a', 'c7', 'f3', '91', '78', '6f', '9d', '9e', 'b2', 'b1', 
        '32', '75', '19', '3d', 'ff', '35', '8a', '7e', '6d', '54', 'c6', '80', 'c3', 'bd', '0d', '57', 
        'df', 'f5', '24', 'a9', '3e', 'a8', '43', 'c9', 'd7', '79', 'd6', 'f6', '7c', '22', 'b9', '03', 
        'e0', '0f', 'ec', 'de', '7a', '94', 'b0', 'bc', 'dc', 'e8', '28', '50', '4e', '33', '0a', '4a', 
        'a7', '97', '60', '73', '1e', '00', '62', '44', '1a', 'b8', '38', '82', '64', '9f', '26', '41', 
        'ad', '45', '46', '92', '27', '5e', '55', '2f', '8c', 'a3', 'a5', '7d', '69', 'd5', '95', '3b', 
        '07', '58', 'b3', '40', '86', 'ac', '1d', 'f7', '30', '37', '6b', 'e4', '88', 'd9', 'e7', '89', 
        'e1', '1b', '83', '49', '4c', '3f', 'f8', 'fe', '8d', '53', 'aa', '90', 'ca', 'd8', '85', '61', 
        '20', '71', '67', 'a4', '2d', '2b', '09', '5b', 'cb', '9b', '25', 'd0', 'be', 'e5', '6c', '52', 
        '59', 'a6', '74', 'd2', 'e6', 'f4', 'b4', 'c0', 'd1', '66', 'af', 'c2', '39', '4b', '63', 'b6'
      ]

A = [
   "8e20faa72ba0b470", "47107ddd9b505a38", "ad08b0e0c3282d1c", "d8045870ef14980e",
   "6c022c38f90a4c07", "3601161cf205268d", "1b8e0b0e798c13c8", "83478b07b2468764",
   "a011d380818e8f40", "5086e740ce47c920", "2843fd2067adea10", "14aff010bdd87508",
   "0ad97808d06cb404", "05e23c0468365a02", "8c711e02341b2d01", "46b60f011a83988e",
   "90dab52a387ae76f", "486dd4151c3dfdb9", "24b86a840e90f0d2", "125c354207487869",
   "092e94218d243cba", "8a174a9ec8121e5d", "4585254f64090fa0", "accc9ca9328a8950",
   "9d4df05d5f661451", "c0a878a0a1330aa6", "60543c50de970553", "302a1e286fc58ca7",
   "18150f14b9ec46dd", "0c84890ad27623e0", "0642ca05693b9f70", "0321658cba93c138",
   "86275df09ce8aaa8", "439da0784e745554", "afc0503c273aa42a", "d960281e9d1d5215",
   "e230140fc0802984", "71180a8960409a42", "b60c05ca30204d21", "5b068c651810a89e",
   "456c34887a3805b9", "ac361a443d1c8cd2", "561b0d22900e4669", "2b838811480723ba",
   "9bcf4486248d9f5d", "c3e9224312c8c1a0", "effa11af0964ee50", "f97d86d98a327728",
   "e4fa2054a80b329c", "727d102a548b194e", "39b008152acb8227", "9258048415eb419d",
   "492c024284fbaec0", "aa16012142f35760", "550b8e9e21f7a530", "a48b474f9ef5dc18",
   "70a6a56e2440598e", "3853dc371220a247", "1ca76e95091051ad", "0edd37c48a08a6d8",
   "07e095624504536c", "8d70c431ac02a736", "c83862965601dd1b", "641c314b2b8ee083",
    ]

kC = [
    'b1085bda1ecadae9ebcb2f81c0657c1f2f6a76432e45d016714eb88d7585c4fc4b7ce09192676901a2422a08a460d31505767436cc744d23dd806559f2a64507',
    '6fa3b58aa99d2f1a4fe39d460f70b5d7f3feea720a232b9861d55e0f16b501319ab5176b12d699585cb561c2db0aa7ca55dda21bd7cbcd56e679047021b19bb7',
    'f574dcac2bce2fc70a39fc286a3d843506f15e5f529c1f8bf2ea7514b1297b7bd3e20fe490359eb1c1c93a376062db09c2b6f443867adb31991e96f50aba0ab2', 
    'ef1fdfb3e81566d2f948e1a05d71e4dd488e857e335c3c7d9d721cad685e353fa9d72c82ed03d675d8b71333935203be3453eaa193e837f1220cbebc84e3d12e',
    '4bea6bacad4747999a3f410c6ca923637f151c1f1686104a359e35d7800fffbdbfcd1747253af5a3dfff00b723271a167a56a27ea9ea63f5601758fd7c6cfe57',
    'ae4faeae1d3ad3d96fa4c33b7a3039c02d66c4f95142a46c187f9ab49af08ec6cffaa6b71c9ab7b40af21f66c2bec6b6bf71c57236904f35fa68407a46647d6e', 
    'f4c70e16eeaac5ec51ac86febf240954399ec6c7e6bf87c9d3473e33197a93c90992abc52d822c3706476983284a05043517454ca23c4af38886564d3a14d493',
    '9b1f5b424d93c9a703e7aa020c6e41414eb7f8719c36de1e89b4443b4ddbc49af4892bcb929b069069d18d2bd1a5c42f36acc2355951a8d9a47f0dd4bf02e71e',
    '378f5a541631229b944c9ad8ec165fde3a7d3a1b258942243cd955b7e00d0984800a440bdbb2ceb17b2b8a9aa6079c540e38dc92cb1f2a607261445183235adb',
    'abbedea680056f52382ae548b2e4f3f38941e71cff8a78db1fffe18a1b3361039fe76702af69334b7a1e6c303b7652f43698fad1153bb6c374b4c7fb98459ced',
    '7bcd9ed0efc889fb3002c6cd635afe94d8fa6bbbebab076120018021148466798a1d71efea48b9caefbacd1d7d476e98dea2594ac06fd85d6bcaa4cd81f32d1b',
    '378ee767f11631bad21380b00449b17acda43c32bcdf1d77f82012d430219f9b5d80ef9d1891cc86e71da4aa88e12852faf417d5d9b21b9948bc924af11bd720'
     ]


Tau = [
        0,  8, 16, 24, 32, 40, 48, 56,
        1,  9, 17, 25, 33, 41, 49, 57,
        2, 10, 18, 26, 34, 42, 50, 58,
        3, 11, 19, 27, 35, 43, 51, 59,
        4, 12, 20, 28, 36, 44, 52, 60,
        5, 13, 21, 29, 37, 45, 53, 61,
        6, 14, 22, 30, 38, 46, 54, 62,
        7, 15, 23, 31, 39, 47, 55, 63,
      ]

h = [
    
    '01'*64
    ]

N = '00'*64

E = '00'*64




#__________________________________________________________________________________________________________
#разворачиваем файл и заодно выполняем операцию дополнения
def reverse_file(file):
    rev_file = 'rev_file'
    size = os.path.getsize(file)
    k = size%64
    file = open(file,'rb')
    m = bytes.hex(file.read(k))
    r_f = open(rev_file,'wb')
    r_f.write(bytes.fromhex(m))
    r_f.close()
    for i in range(size//64):
        r_f = open('buf1','wb')
        r_f.write(file.read(64))
        r_f.close()
        os.system('copy /Y /B buf1+rev_file r_f')
        os.system('copy /Y /B r_f rev_file')
    os.system('del /F r_f')
    os.system('del /F buf1')
    return rev_file
#__________________________________________________________________________________________________________
#преобразование до строки размером size байт, на вход число и размер
def adhex(a,size):
    return '0'*(size*2 - len(hex(a)[2:]))+hex(a)[2:]
#__________________________________________________________________________________________________________
#преобразование X на вход две строки
def pr_X(a,b):
    return adhex(int(a,16)^int(b,16),64)
#__________________________________________________________________________________________________________
#преобразование S на вход строка
def pr_S(a):
    result=''
    for i in range(64):
        result += kPi[int(a[2*i:2*i+2],16)]
    return result
#__________________________________________________________________________________________________________
#преобразование P на вход строка
def pr_P(a):
    result = ''
    for i in range(64):
        result += a[2*Tau[i]:2*Tau[i]+2]
    return result   
#__________________________________________________________________________________________________________
#преобразование l малое (на вход 8 байт)
def low_l(a):
    n = a
    a = int(a,16)
    result = 0
    for i in range(64):
        if a%2==1:
            result ^= int(A[63-i],16)
        a = a//2
    return adhex(result,8)
#__________________________________________________________________________________________________________
#преобразование L большое на вход строка
def pr_L(a):
    result = ''
    for i in range(8):
        result += low_l(a[16*i:16*i+16])
    return result
#__________________________________________________________________________________________________________
#преобразование LPSX
def pr_LPSX(a,b):
    result = pr_X(a,b)
    result = pr_S(result)
    result = pr_P(result)
    result = pr_L(result)
    return result
#__________________________________________________________________________________________________________
#преобразование E на вход массив ключей и строка
def pr_E(it_key,m):
    result = m
    for i in range(12):
        result = pr_LPSX(it_key[i],result)
    result = pr_X(result,it_key[12])
    return result
#__________________________________________________________________________________________________________
#развертывание ключей
def key_reamer(key1,m):
    result = [key1]
    temp = pr_LPSX(result[0],m)
    for i in range(12):
        result.append(pr_LPSX(result[i],kC[i]))
    return result
#__________________________________________________________________________________________________________
#преобразование E
def pr_g(N,h,m):
    temp = pr_LPSX(N,h)
    it_key = key_reamer(temp,m)
    result = pr_E(it_key,m)
    result = int(result,16)^int(h,16)^int(m,16)
    return adhex(result,64)    

#__________________________________________________________________________________________________________
#получить хэш
def get_hash(file,flag):
    h = '00'*64
    if flag==256:
        h = '01'*64
    N = '00'*64
    E = '00'*64
    pol = '1'+'0'*128
    file = open(file,'rb')
    M = file.read()
    size = len(M)
    k = size
    l = size - 64 
    r = size
    
    #этап 2
    while size >= 64:
        m = bytes.hex(M[l:r])
        h = pr_g(N,h,m)
        N = adhex((int(N,16)+512)%int(pol,16),64)
        E = adhex((int(E,16)+int(m,16))%int(pol,16),64)
        size -= 64
        l -= 64
        r -= 64
    #этап 3
    m = bytes.hex(M[:r])
    m = '00'*(63-size)+'01'+m
    h = pr_g(N,h,m)
    N = adhex((int(N,16)+size*8)%int(pol,16),64)
    E = adhex((int(E,16)+int(m,16))%int(pol,16),64)
    h = pr_g('00'*64,h,N)
    h = pr_g('00'*64,h,E)
    if flag==256:
        h = h[:64]
    return h    
#__________________________________________________________________________________________________________
print("Файл хеширования | Файл для вывода | Размер")
fin,fout,flag = map(str,input().split())
result = get_hash(fin,int(flag))
fout = open(fout,'w')
fout.write(result)
fout.close()









